package archimate.codegen;

import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.codegen.jet.JETEmitter;
import org.eclipse.emf.codegen.jet.JETException;

public class JETEngine {

	private Config config;

	public JETEngine(Config config) {
		this.config = config;
	}

	/**
	 * Invokes the JET template specified in the <code>Config</code> with the
	 * model specified in the <code>Config</code> and returns the generated text
	 * as a String.
	 * <p>
	 * This implementation uses a <code>JETEmitter</code> to translate the
	 * template to a Java implementation class. The translated class is created
	 * in a hidden project called <code>.JETEmitters</code>.
	 * <p>
	 * In order to be able to compile the translated template implementation
	 * class, the classes used by the model specified in the <code>Config</code>
	 * must be available in the classpath. For this reason, this method sets the
	 * first runtime library of the plugin specified in the <code>Config</code>
	 * as a classpath variable to the <code>.JETEmitters</code> project.
	 * 
	 * @param monitor
	 *            the progress monitor to use. May be <code>null</code>.
	 * @return the source code text generated by the JET template
	 * @throws CoreException
	 */
	protected String generate() {
		JETEmitter emitter = new JETEmitter(config.getTemplateFullUri(),
				getClass().getClassLoader());
		try {
			emitter.addVariable(config.getClasspathVariable(), config
					.getPluginId());
		} catch (JETException e) {
			System.out.println("Configuring JetEmitter failed.");
			e.printStackTrace();
		}
		String result = null;
		try {
			result = emitter.generate(new NullProgressMonitor(),
					new Object[] { config.getModel() });
		} catch (JETException e) {
			System.out.println("Generating code with JetEmitter failed.");
			e.printStackTrace();
		}
		return result;
	}
}
